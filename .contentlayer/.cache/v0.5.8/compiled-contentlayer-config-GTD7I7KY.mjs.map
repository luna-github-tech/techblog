{
  "version": 3,
  "sources": ["../../../contentlayer.config.ts"],
  "sourcesContent": ["// contentlayer.config.ts\r\nimport { defineDocumentType, makeSource } from 'contentlayer2/source-files'\r\nimport remarkGfm from 'remark-gfm'\r\nimport remarkSlug from 'remark-slug'\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\r\n\r\nexport const Post = defineDocumentType(() => ({\r\n  name: 'Post',\r\n  filePathPattern: 'posts/**/*.mdx',   // dentro de content/posts/\r\n  contentType: 'mdx',\r\n  fields: {\r\n    title:    { type: 'string', required: true },\r\n    date:     { type: 'date',   required: true },\r\n    summary:  { type: 'string', required: false },\r\n    cover:    { type: 'string', required: false },\r\n    category: { type: 'string', required: false },\r\n    tags:     { type: 'list',   of: { type: 'string' }, required: false },\r\n    featured: { type: 'boolean', required: false },\r\n    popular:  { type: 'boolean', required: false },\r\n    // seguimos con A) tolerante: string\r\n    readingTime: { type: 'string', required: false },\r\n  },\r\n  computedFields: {\r\n    slug: {\r\n      type: 'string',\r\n      resolve: (doc) => doc._raw.flattenedPath.replace(/^posts\\//, ''),\r\n    },\r\n    url: {\r\n      type: 'string',\r\n      resolve: (doc) => `/blog/${doc._raw.flattenedPath.replace(/^posts\\//, '')}`,\r\n    },\r\n    readingTimeMinutes: {\r\n      type: 'number',\r\n      resolve: (doc) => {\r\n        const raw = (doc.readingTime ?? '').toString()\r\n        const n = parseInt(raw.replace(/\\D/g, ''), 10)\r\n        return Number.isFinite(n) && n > 0 ? n : 1\r\n      },\r\n    },\r\n  },\r\n}))\r\n\r\nexport default makeSource({\r\n  // \u2B05\uFE0F MUY IMPORTANTE: limita el scope a /content\r\n  contentDirPath: 'content',\r\n  documentTypes: [Post],\r\n  mdx: {\r\n    remarkPlugins: [remarkGfm, remarkSlug],\r\n    rehypePlugins: [[rehypeAutolinkHeadings, { behavior: 'append' }]],\r\n  },\r\n})\r\n"],
  "mappings": ";AACA,SAAS,oBAAoB,kBAAkB;AAC/C,OAAO,eAAe;AACtB,OAAO,gBAAgB;AACvB,OAAO,4BAA4B;AAE5B,IAAM,OAAO,mBAAmB,OAAO;AAAA,EAC5C,MAAM;AAAA,EACN,iBAAiB;AAAA;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAU,EAAE,MAAM,UAAU,UAAU,KAAK;AAAA,IAC3C,MAAU,EAAE,MAAM,QAAU,UAAU,KAAK;AAAA,IAC3C,SAAU,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC5C,OAAU,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC5C,UAAU,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,IAC5C,MAAU,EAAE,MAAM,QAAU,IAAI,EAAE,MAAM,SAAS,GAAG,UAAU,MAAM;AAAA,IACpE,UAAU,EAAE,MAAM,WAAW,UAAU,MAAM;AAAA,IAC7C,SAAU,EAAE,MAAM,WAAW,UAAU,MAAM;AAAA;AAAA,IAE7C,aAAa,EAAE,MAAM,UAAU,UAAU,MAAM;AAAA,EACjD;AAAA,EACA,gBAAgB;AAAA,IACd,MAAM;AAAA,MACJ,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE;AAAA,IACjE;AAAA,IACA,KAAK;AAAA,MACH,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,SAAS,IAAI,KAAK,cAAc,QAAQ,YAAY,EAAE,CAAC;AAAA,IAC3E;AAAA,IACA,oBAAoB;AAAA,MAClB,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ;AAChB,cAAM,OAAO,IAAI,eAAe,IAAI,SAAS;AAC7C,cAAM,IAAI,SAAS,IAAI,QAAQ,OAAO,EAAE,GAAG,EAAE;AAC7C,eAAO,OAAO,SAAS,CAAC,KAAK,IAAI,IAAI,IAAI;AAAA,MAC3C;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEF,IAAO,8BAAQ,WAAW;AAAA;AAAA,EAExB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK;AAAA,IACH,eAAe,CAAC,WAAW,UAAU;AAAA,IACrC,eAAe,CAAC,CAAC,wBAAwB,EAAE,UAAU,SAAS,CAAC,CAAC;AAAA,EAClE;AACF,CAAC;",
  "names": []
}
